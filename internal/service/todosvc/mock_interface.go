// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package todosvc is a generated GoMock package.
package todosvc

import (
	context "context"
	reflect "reflect"
	models "todoapp/internal/models"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoStorer is a mock of TodoStorer interface.
type MockTodoStorer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoStorerMockRecorder
}

// MockTodoStorerMockRecorder is the mock recorder for MockTodoStorer.
type MockTodoStorerMockRecorder struct {
	mock *MockTodoStorer
}

// NewMockTodoStorer creates a new mock instance.
func NewMockTodoStorer(ctrl *gomock.Controller) *MockTodoStorer {
	mock := &MockTodoStorer{ctrl: ctrl}
	mock.recorder = &MockTodoStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoStorer) EXPECT() *MockTodoStorerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoStorer) Create(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTodoStorerMockRecorder) Create(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoStorer)(nil).Create), ctx, task)
}

// Delete mocks base method.
func (m *MockTodoStorer) Delete(ctx context.Context, id string, userID *uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoStorerMockRecorder) Delete(ctx, id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoStorer)(nil).Delete), ctx, id, userID)
}

// GetAll mocks base method.
func (m *MockTodoStorer) GetAll(ctx context.Context, userID *uuid.UUID) ([]models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID)
	ret0, _ := ret[0].([]models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoStorerMockRecorder) GetAll(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoStorer)(nil).GetAll), ctx, userID)
}

// MarkDone mocks base method.
func (m *MockTodoStorer) MarkDone(ctx context.Context, id string, userID *uuid.UUID) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDone", ctx, id, userID)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkDone indicates an expected call of MarkDone.
func (mr *MockTodoStorerMockRecorder) MarkDone(ctx, id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDone", reflect.TypeOf((*MockTodoStorer)(nil).MarkDone), ctx, id, userID)
}

// Update mocks base method.
func (m *MockTodoStorer) Update(ctx context.Context, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoStorerMockRecorder) Update(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoStorer)(nil).Update), ctx, task)
}
