// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlitecloud "github.com/sqlitecloud/sqlitecloud-go"
)

// MockSqliteClouder is a mock of SqliteClouder interface.
type MockSqliteClouder struct {
	ctrl     *gomock.Controller
	recorder *MockSqliteClouderMockRecorder
}

// MockSqliteClouderMockRecorder is the mock recorder for MockSqliteClouder.
type MockSqliteClouderMockRecorder struct {
	mock *MockSqliteClouder
}

// NewMockSqliteClouder creates a new mock instance.
func NewMockSqliteClouder(ctrl *gomock.Controller) *MockSqliteClouder {
	mock := &MockSqliteClouder{ctrl: ctrl}
	mock.recorder = &MockSqliteClouderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSqliteClouder) EXPECT() *MockSqliteClouderMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSqliteClouder) Execute(SQL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", SQL)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSqliteClouderMockRecorder) Execute(SQL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSqliteClouder)(nil).Execute), SQL)
}

// Select mocks base method.
func (m *MockSqliteClouder) Select(SQL string) (*sqlitecloud.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", SQL)
	ret0, _ := ret[0].(*sqlitecloud.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Select indicates an expected call of Select.
func (mr *MockSqliteClouderMockRecorder) Select(SQL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSqliteClouder)(nil).Select), SQL)
}
