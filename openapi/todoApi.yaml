openapi: 3.0.3

info:
  title: Todo-API
  description: This is a todo task API which supports creation, updating, deletion of tasks, and user management.
  version: 0.1.0
  contact:
    email: kumarsumitjat298@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: "http://localhost:9001"

paths:
  /login:
    post:
      tags:
        - User
      summary: User login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "a valid email address"
                  example: "sumit@kumar.com"
                password:
                  type: string
                  description: "a minimum of 8 character long password"
                  example: "Pass#1234"
              required:
                - email
                - password
            encoding:
              email:
                allowReserved: true
              password:
                allowReserved: true
      security: [] # no authentication
      responses:
        "200":
          description: >
            Successful login, the server return a cokkie name `token` with 15min expiry. 
            You can include this cokkie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=a420e905-acfd-4967-aeb2-ed41429debc4; Path=/; Expires=Sat, 26 Oct 2024 03:14:42 GMT; HttpOnly
        "401":
          description: Invalid username or password
        "404":
          description: User not found

  /register:
    post:
      tags:
        - User
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of user, can't be empty
                  example: "sumit Kumar"
                email:
                  type: string
                  description: "a valid email address, must be unique"
                  example: "sumit@kumar.com"
                password:
                  type: string
                  description: "a minimum of 8 character long password"
                  example: "Pass#1234"
              required:
                - name
                - email
                - password
            encoding:
              name:
                allowReserved: true
              email:
                allowReserved: true
              password:
                allowReserved: true
      responses:
        "201":
          description: User registered
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=a420e905-acfd-4967-aeb2-ed41429debc4; Path=/; Expires=Sat, 26 Oct 2024 03:14:42 GMT; HttpOnly
        "400":
          description: Invalid input

  /tasks:
    get:
      tags:
        - Todo
      summary: Retrieve all tasks for authenticated user
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TodoTask"
        "404":
          description: Task not found

  /task:
    post:
      tags:
        - Todo
      summary: Create a new task for authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskInput"
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoTask"

  /tasks/{taskId}:
    put:
      tags:
        - Todo
      summary: Update a task for authenticated user
      parameters:
        - name: taskID
          in: path
          required: true
          description: ID of the task to update
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoTask"
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TodoTask"
        "404":
          description: Task not found

    delete:
      tags:
        - Todo
      summary: Delete a task for authenticated user
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Task deleted successfully
        "404":
          description: Task not found

  /tasks/{taskId}/done:
    patch:
      tags:
        - Todo
      summary: marks the task as done for authenticated user
      parameters:
        - name: taskId
          in: path
          required: true
          description: ID of the task to mark for done
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: Task is marked as done
        "404":
          description: Task not found

components:
  schemas:
    TaskInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string

    TodoTask:
      type: object
      required:
        - title
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        isDone:
          type: boolean
          default: false
        addedAt:
          type: string
          format: date-time
          description: time stamp when task is created
        modifiedAt:
          type: string
          format: date-time
          description: time when the task is updated

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string

    UserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string

    UserResp:
      type: object
      properties:
        id:
          type: string
          format: uuid
        token:
          type: string
        userId:
          type: string
          format: uuid
        expiry:
          type: string
          format: date-time
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token # cookie name
